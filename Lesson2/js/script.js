"use strict";

/*
______________________________________________________________________
1 Объясните почему код даёт именно такие результаты?
Подсказка. Чтобы лучше разобраться возьмите этот код и запустите в отладчике в браузере со
включенными точками остановки.
______________________________________________________________________
*/

//пример 1
/*
Префиксная форма инкремента
В переменную c присваивается значение результата инкремента текущего значения переменной a (a = 1)
Префиксная форма возвращает новое значение переменной
До выполнения присваивания: c = undefined, a = 1
После выполнения: c = 2, a = 2
*/
let a = 1,
    b = 1,
    c, d;
c = ++a;
alert(c); // ответ: 2

//пример 2
/*
Постфиксная форма инкремента
В переменную d присваивается старое значение переменной b (b = 1), до выполнения результата инкремента её значения
Постфиксная форма возвращает старое значение переменной (до увеличения числа)
До выполнения присваивания присваивания: d = undefined, b = 1
После выполнения: d = 1, b = 2
*/
d = b++;
alert(d); //ответ: 1

//пример 3
/*
Префиксная форма инкремента
В переменную c присваивается значение суммы числа 2 и результата инкремента текущего значения переменной a (++a = 2 + 1 = 3)
До выполнения присваивания: с = 2, a = 2
После выполнения: с = 5, a = 3
*/
c = 2 + ++a;
alert(c); //ответ: 5

//пример 4
/*
Постфиксная форма инкремента
В переменную d присваивается значение суммы числа 2 и старое значение переменной b (++b = 2 + 1 = 3)
До выполнения присваивания: d = 1, b = 2
После выполнения: d = 4, b = 3
*/
d = 2 + b++;

alert(d); //ответ: 4
alert(a); //3
alert(b); //3


/*
______________________________________________________________________
2 Чему будут равны переменные x и a в примере ниже? Написать почему так произошло
(описать последовательность действий).
______________________________________________________________________
*/

/*
Сокращённая арифметика с присваиванием
применить оператор * к переменной и сохранить результат в ней же
первыми по приоритету выполняются вычисления в скобках
a = 4, значение переменной a умножено на 2
x = 5, вычислено как 1 + 4 (текущее значение переменной a)
*/
a = 2;
let x = 1 + (a *= 2);


/*
______________________________________________________________________
3 Объявить две переменные a и b и задать им целочисленные произвольные начальные
значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль можно считать положительным числом);
- если а и b отрицательные, вывести их произведение;
- * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;
______________________________________________________________________
*/

a = -3;
b = 2;

if (a >= 0 && b >= 0) {
    console.log(`Разность чисел ${a} и ${b} = ${(a - b)}`);
} else if (a < 0 && b < 0) {
    console.log(`Произведение чисел ${a} и ${b} = ${(a * b)}`);
} else if (Math.sign(a) != Math.sign(b)) {
    console.log(`Сумма чисел ${a} и ${b} = ${(a + b)}`);
    //-1
} else {
    console.log("Какие-то неправильные у Вас числа.");
}


/*
______________________________________________________________________
4 Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя
параметрами. Т.е. например, функция для сложения должна принимать два числа, складывать их
и возвращать результат.
Обязательно использовать оператор return.
______________________________________________________________________
*/

a = 10;
b = 2;

/**
 * Функция суммирования двух чисел
 * @param {number} arg1 число 1
 * @param {number} arg2 число 2
 * @returns {number} сумма число 1 + число 2
 */
function summation(arg1, arg2) {
    return arg1 + arg2;
}

console.log(`Сумма чисел ${a} и ${b} = ${summation(a, b)}`);
//12

/**
 * Функция вычитания двух чисел
 * @param {number} arg1 число 1
 * @param {number} arg2 число 2
 * @returns {number} разница число 1 - число 2
 */
function subtraction(arg1, arg2) {
    return arg1 - arg2;
}

console.log(`Разница чисел ${a} и ${b} = ${subtraction(a, b)}`);
//8

/**
 * Функция деления двух чисел
 * @param {number} arg1 число 1
 * @param {number} arg2 число 2
 * @returns {number} результат деления число 1 / число 2
 */
function division(arg1, arg2) {
    return arg1 / arg2;
}

console.log(`Деление чисел ${a} и ${b} = ${division(a, b)}`);
//5

/**
 * Функция деления умножения чисел
 * @param {number} arg1 число 1
 * @param {number} arg2 число 2
 * @returns {number} результат умножения число 1 * число 2
 */
function multiplication(arg1, arg2) {
    return arg1 * arg2;
}

console.log(`Произведение чисел ${a} и ${b} = ${multiplication(a, b)}`);
//20

/*
______________________________________________________________________
5 Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических
операций
(использовать функции из задания 4) и вернуть полученное значение.
______________________________________________________________________
*/

/**
 * 
 * @param {number} arg1 число 1
 * @param {number} arg2 число 2
 * @param {string} operation операция
 * @returns {number} результат выполнения operation между число 1 и число 2
 */
function mathOperation(arg1, arg2, operation) {
    if (isFinite(arg1) && isFinite(arg1)) {
        switch (operation) {
            case "summation":
            case "сумма":
                return summation(arg1, arg2);
            case "subtraction":
            case "вычитание":
                return subtraction(arg1, arg2);
            case "division":
            case "деление":
                return division(arg1, arg2);
            case "multiplication":
            case "умножение":
                return multiplication(arg1, arg2);
            default:
                console.log("Неизвестная операция.");
                break;
        }
    } else {
        console.log("Математические операции можно проводить только над числами.");
    }
}

let operationName = "деление"
console.log(`Результат выполнения операции ${operationName} для чисел ${a} и ${b} = ${mathOperation(a, b, operationName)}`);
// 5

/*
______________________________________________________________________
6**. (Это задание не является частью курса, можете его не делать, оно для тех кому мало
обычных заданий, требует времени и возможно гугления, делайте по желанию.)
Программа должна спросить у пользователя число, это будет количество денег, которое он хочет
положить на счет в банке. Затем программа должна выдать примерно такое сообщение:
"Ваша сумма в 101 рубль успешно зачислена." - в случае если пользователь ввел 101
"Ваша сумма в 10020 рублей успешно зачислена." - в случае если пользователь ввел 10020
"Ваша сумма в 120104 рубля успешно зачислена." - в случае если пользователь ввел 120104
То есть ваша задача выводить слово «рубль» в правильном падеже, в зависимости от введенного
числа.
______________________________________________________________________
*/

/**
 * Функция внесения денег на депозит
 * @returns {boolean} true деньги внесены, false деньги вноситься не будут
 */
function getSummByUser() {
    let summToDeposit = prompt("Сколько денег Вы хотите внести на счёт?");
    if (!isFinite(summToDeposit)) {
        if (confirm("Внести на счёт можно только числовое значение.\nВвести сумму повторно?")) {
            getSummByUser();
        } else {
            alert("Денег у нас нет.\nБоли мы не боимся.\nВремени у нас дохрена.")
            return false;
        }
    } else {
        alert(`Ваша сумма в ${summToDeposit} ${getCorrectEnding(summToDeposit)} успешно зачислена.`);
        return true;
    }
}

/**
 * Функция для определения склонения окончания рублей
 * @param {number} summ сумма для определения склонения окончания рублей
 * @returns {string} коректное склонение
 */
function getCorrectEnding(summ) {
    let ending = ['рубль', 'рубля', 'рублей'];
    summ = Math.abs(summ);
    if (Number.isInteger(summ)) {
        let cases = [2, 0, 1, 1, 1, 2];
        return ending[(summ % 100 > 4 && summ % 100 < 20) ? 2 : cases[(summ % 10 < 5) ? summ % 10 : 5]];
    } else {
        return ending[1];
    }
}

getSummByUser();